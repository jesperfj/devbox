AWSTemplateFormatVersion: "2010-09-09"

Description: One RDS database (no Internet access) and one EC2 instance with ssh access from Internet

Parameters:
  StackName:
    Type: String
  AZ1:
    Type: String
  AZ2:
    Type: String
  Cidr:
    Type: String
    Default: 172.31.0.0/24
  Cidr0:
    Type: String
    Default: 172.31.0.0/25
  Cidr1:
    Type: String
    Default: 172.31.128.0/25


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: Cidr

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AZ1
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: Cidr0

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AZ2
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: Cidr1

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC

  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      NetworkAclId:
        Ref: NetworkAcl

  SubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      NetworkAclId:
        Ref: NetworkAcl

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Basic permissive security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: rds db group
      SubnetIds:
      - Ref: Subnet
      - Ref: Subnet1

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '100'
      DBInstanceClass: db.t2.micro
      DBName: mydb
      DBSubnetGroupName:
        Ref: RDSDBSubnetGroup
      Engine: postgres
      MasterUsername: scott
      MasterUserPassword: tiger123
      PubliclyAccessible: false
      VPCSecurityGroups:
      - Ref: InstanceSecurityGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-a60c23b0
      InstanceType: t2.micro
      KeyName: default-ssh-key
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: '0'
        SubnetId:
          Ref: Subnet
        GroupSet:
        - Ref: InstanceSecurityGroup

Outputs:
  SecurityGroup:
    Value:
      Ref: InstanceSecurityGroup
  VPC:
    Value:
      Ref: VPC
  Subnet:
    Value:
      Ref: Subnet
  Subnet1:
    Value:
      Ref: Subnet1
  RouteTable:
    Value:
      Ref: RouteTable
  EC2Instance:
    Value:
      Ref: EC2Instance
  DBHost:
    Value:
      Fn::GetAtt:
      - RDSInstance
      - Endpoint.Address
